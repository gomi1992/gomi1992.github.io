[{"categories":["无聊的开发"],"contents":"起因 想把自己的工作计划在网页里展示出来，方便监督自己。\n想法 plantuml、mermaid、excalidraw都是不错的工具。\nplantuml和mermaid最主要的是展示甘特图，最终选择mermaid，原因是界面稍微漂亮一些，而plantuml渲染需要外部服务器。\nexcalidraw是个非常自由的白板，本打算使用多人协作方式集成它，这样就能多端实时协作，但因为跨域的安全性问题无法集成到网页中。\n有了想法就开工。\n集成mermaid mermaid提供js脚本，可以直接集成到网页中。\n\u0026lt;div id=\u0026#34;mermaid-gantt\u0026#34; class=\u0026#34;mermaid\u0026#34;\u0026gt; gantt dateFormat YYYY-MM-DD axisFormat %y/%d/%m title Schedule excludes weekdays section 个人安排网页\u0026lt;br\u0026gt;开发 集成甘特图 : done, 2022-11-02,3h \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;js/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.onload = function () { mermaid.initialize({ theme: \u0026#39;forest\u0026#39;, // themeCSS: \u0026#39;.node rect { fill: red; }\u0026#39;, logLevel: 3, securityLevel: \u0026#39;loose\u0026#39;, flowchart: {curve: \u0026#39;basis\u0026#39;}, gantt: {axisFormat: \u0026#39;%m/%d/%Y\u0026#39;}, sequence: {actorMargin: 50}, // sequenceDiagram: { actorMargin: 300 } // deprecated }); } \u0026lt;/script\u0026gt; 集成excalidraw 方案1--分享链接集成 这个方案很简单，效果也很好，将excalidraw的分享链接塞进iframe里。 每回修改白板后就把新的链接更新到代码中即可。\n最后并没有采用这个方案，原因在于数据不在自己手上。\n这个方案并没有真正测试过，可能也会出现方案2的问题。\n方案2--实时写作集成 集成失败，由于部署环境没有部署https，所以静态页的安全上下文（secure context）为不安全。 因此，嵌在静态页中的iframe的安全上下文也为不安全。\n这个安全上下文不安全导致excalidraw的实时写作无法使用加密信道。\n方案3--使用静态数据由kroki渲染 kroki提供一堆各种图的在线渲染，将数据给他，他给你一个svg，就是这么简单，但是数据存在泄露的风险。\n有严重缺陷，kroki仅支持4096字节长度的数据渲染，一旦图大了也就无法渲染。\nfunction textEncode(str) { if (window.TextEncoder) { return new TextEncoder(\u0026#39;utf-8\u0026#39;).encode(str); } var utf8 = unescape(encodeURIComponent(str)); var result = new Uint8Array(utf8.length); for (var i = 0; i \u0026lt; utf8.length; i++) { result[i] = utf8.charCodeAt(i); } return result; } // 数据编码 var data = textEncode(\u0026#34;your data here\u0026#34;); // 数据压缩 var compressed = pako.deflate(data, {level: 9, to: \u0026#39;string\u0026#39;}) var result = btoa(compressed) .replace(/\\+/g, \u0026#39;-\u0026#39;).replace(/\\//g, \u0026#39;_\u0026#39;); var kroki_url = \u0026#39;https://kroki.io/excalidraw/svg/\u0026#39; + result; // 请求svg request.open(\u0026#39;GET\u0026#39;, kroki_url, false); request.send(null); if (request.status === 200) { // 向div中插入svg document.getElementById(\u0026#34;excalidraw\u0026#34;).innerHTML = request.responseText; } 方案4 将excalidraw转为SVG。\n使用前端库excalidraw/utils将excalidraw转换为svg，插入到网页中。\n官方的示例代码有点问题，正确的如下。需要注意的地方是，不能直接传入string作为参数，需要将string转换成结构体传入（excalidraw数据本身就是json格式）。\nfunction loadExcalidraw() { var request = new XMLHttpRequest(); request.open(\u0026#39;GET\u0026#39;, \u0026#39;/data/schedule.excalidraw\u0026#39;, false); request.send(null); if (request.status === 200) { var data = eval(\u0026#34;(\u0026#34; + request.responseText + \u0026#34;)\u0026#34;); var svg = exportToSvg(data); svg.then((value) =\u0026gt; { console.log(value); document.getElementById(\u0026#34;excalidraw\u0026#34;).innerHTML = value.outerHTML; }) } } 在线编辑 在github上打开项目，将com改为dev或者按一下“.”就可以进入GitHub.dev在线编辑环境，在其中安装excalidraw和mardown preview插件（网页端渲染mermaid还暂时不支持），就可以在线编辑excalidraw，还有预览mermaid图了。\n持续部署 因为是静态网页，所谓的部署也就是把最新的网页拉取回来。 没有将静态页打包成docker镜像，若采用docker打包，则需要拉取 镜像--停止旧容器--运行新容器--删除旧镜像 这一系列操作；远不如本地部署nginx，更新对应的web资源目录来的方便。\n触发使用github webhook触发，这里没有选择写个简单web服务通过内网穿透暴露到互联网上，主要担心内网穿透服务不稳定。\nntfy是一个消息发布、订阅的工具，原本我是想用telegram来打通树莓派和github的，但是telegram不支持两个bot间通信。 在ntfy官方服务器中发布消息，你得先有一个主题，这个主题任何人都可以订阅、发布（没错，官方服务器就是这么设定的，想使用权限，你需要自己部署），所以起一个又长又难猜的主题吧。消息发布、和接受文档里都写得非常详细，不再赘述。\n我这里使用python去轮询ntfy接口收取消息，并加上了访问频率限制，未对消息内容做检查，因为用不上，反正做的操作也是从github拉取项目。\n注：github webhook支持内容验证，ntfy不能与之对接，得自己写web服务对接，所以这一点来说，ntfy有很大缺点。\nimport json import os import time import requests as requests class RateLimiter: def __init__(self): self.capacity = 4.0 self.rate = 0.25 self.tokens = 0.0 self.timeStamp = time.time() def control(self): now = time.time() self.tokens = min(self.capacity, self.tokens + int(now - self.timeStamp) * self.rate) self.timeStamp = now if self.tokens \u0026lt; 1: return False else: self.tokens -= 1 return True rateLimiter = RateLimiter() last_time = time.time() while True: try: tmp_time = time.time() resp = requests.get( \u0026#34;https://ntfy.sh/yourtopic/json?poll=1\u0026amp;since=\u0026#34; + str(int(last_time)), stream=False) last_time = tmp_time for line in resp.iter_lines(): if line: print(line) data = json.loads(line) if data[\u0026#39;event\u0026#39;] == \u0026#39;message\u0026#39;: if data[\u0026#39;message\u0026#39;] == \u0026#39;Update finish\u0026#39;: continue if rateLimiter.control(): print(\u0026#34;get message\u0026#34;) os.system(\u0026#34;git pull\u0026#34;) requests.post( \u0026#34;https://ntfy.sh/yourtopic\u0026#34;, data=\u0026#34;Update finish\u0026#34;.encode(encoding=\u0026#39;utf-8\u0026#39;)) time.sleep(10) except Exception as e: print(e) 实现效果 ","date":"2022-11-07T09:47:08Z","permalink":"https://gomi1992.github.io/2022/11/07/20221107_%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E8%A1%A8/","section":"post","tags":["持续部署","个人网页"],"title":"我的个人计划表"},{"categories":["无聊的开发"],"contents":"过时的RSS 现在用RSS追资讯的人可能不多了。 RSS没有相似推荐，没有社交，仅仅只有非常单纯的信息流。 随着google reader的关闭，我现在用的最多的阅读器就是inoreader了。\n过时的订阅源 现在新兴的媒体基本都不提供RSS订阅方式，毕竟用RSS没法看到他们的广告，也没法去产生各种联动，提高他们的效益。 于是诞生了RSSHub这样的项目，让我们能够用RSS跟上时代。\ninoreader的痛 inoreader免费版对于我已经够用了，但是仍存在一点点小问题。 比如我没办法在inoreader中阅读cnbeta的全文，必须得离开rss阅读器。 于是我开始寻求解决方案，比如寻找其他的阅读器作为替代。 但成效甚微，不是不支持阅读区内全文阅读，就是限制太多（需要付费）。\n柳暗花明 放弃寻找阅读器替换这条路后，我试着寻找油猴脚本来辅助，也确实找到了一个比较适合我的脚本InoReader Full Feed。 为什么说比较适合呢？因为我的需求很简单，只需要能够以iframe的方式将目标网页嵌入阅读器就可以，而这款脚本的功能超乎了我的想象。 于是我也毫不留情，开始简单粗暴的改造。\n在其代码1.06版本上，第1716行(initFullFeed函数中)后插入如下代码。\nfor(var i=0,j=c.articleContainer.children.length;i\u0026lt;j;i++){ c.articleContainer.removeChild(c.articleContainer.children[0]); } var p = document.createElement(\u0026#34;iframe\u0026#34;); p.setAttribute(\u0026#34;src\u0026#34;,c.itemURL); p.style.width=\u0026#34;100%\u0026#34;; p.style.height=\u0026#34;1000px\u0026#34;; c.articleContainer.appendChild(p); return; 插入后如下图\n这段代码先删除文章内的已有元素，然后插入一个iframe元素到文章界面中，并频闭掉剩下的代码。\n不完整的美 出于安全性考虑，浏览器禁止向iframe中传入cookie，这就导致一些小功能不好实现。\n小trick01 在inoreader的header中插入如下代码，可以解决部分图片防盗链的问题。\n\u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer\u0026#34;\u0026gt; 当然，已经有人在油猴脚本中实现了显示防盗链图片 for Inoreader。\n小trick02 小trick01并不完美，在inoreader中缩略图仍没法加载。 有个办法可以解决，在发送请求时拦截请求，去掉header中的referrer。 浏览器中可以使用ModHeader和requestly.io等插件完成上述功能。\n","date":"2022-07-24T08:19:14+08:00","permalink":"https://gomi1992.github.io/2022/07/24/20220724_inoreader%E4%B8%AD%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/","section":"post","tags":["RSS"],"title":"inoreader中快速阅读全文"},{"categories":["无聊的开发"],"contents":"树莓派 我手头有一个树莓派 3B 和上古的树莓派 1B。总想拿他们做点事。\n做个 nas 吧，说实话我没那么强烈的需求。\n做个摄像头监控服务器，我暂时没那么多财产需要监控。\n那做个提升自己效率的工具如何？\n也不是不行。\n选择树莓派做这些事的原因也比较简单。\n现成的。 功耗相对较低。 资料较多（主要是没那么多精力去折腾）。 docker 与 portainer 与 duplicati 这我就不多介绍了。\ndocker 跑容器，portainer 管理 docker，duplicati 备份数据。\n在使用 docker 时有一点需要注意，使用 u 盘存储数据时，最好不要使用 fat32，建议使用 ext4 等格式。\n我在一开始，使用 fat32 格式的 u 盘，部署 docker+mysql，给 mysql 的数据分配到 u 盘上，mysql 死活无法启动，log 显示 mysql 容器卡在修改文件夹权限那里了，将 U 盘格式从 fat32 换到 ext4 后，就没问题了。\n多功能笔记工具 虽然我文笔不行，但是我还是喜欢写点东西记录下。\n而且我喜欢搜藏，浏览器里的书签已经让我无法顺利查找了。\n我也曾想过自己写一个更强大的书签整理工具。\n在我使用 notion 作为书签整理工具后，我发现，notion 还能保存网页。那我为什么要再造一个轮子呢？\n那使用 notion 就可以了，那跟树莓派有什么关系呢？\nnotion 固然强大，可是数据始终存放在别人那里，而我喜欢把数据握在自己手里。\n于是我选择在树莓派上部署 trilium notes。\n相对于其他笔记应用来说，我认为有以下优点：\n可以自己部署服务器。 有网页 Clipper 插件。 文章可以互相关联。 更好灵活性。 当然也有缺点：\n迷之同步功能。 数据不是原视方式存储，而是存放在数据库中。 不支持 webdav 等存储方式。 正是有以上特点，我选择将它部署在树莓派上，当然部署在云服务器上也是可以的。\n做个时间管理大师 emmm，时间管理大师。。。\n在读了《奇特的一生》后，我想践行一下时间管理法。\n如何践行？真的拿纸笔去记录么？\n这些时间记录，有部分是比较隐私的。\n万一让别人看到了我的小秘密怎么办？\n万一我骗朋友去打游戏，而自己却努力刷题的事暴露了怎么办？\n再说了，自己那甲骨文字体根本见不得人啊。\n时间管理类应用多是番茄钟之类的，精细化管理工具不多。\n我从腾讯开源应用中心里发现了 kimai 这个应用，但是腾讯还没正式上架这个应用。\n我准备自己部署到树莓派上体验一下，于是出现了前面提到的 mysql 部署失败的事情。\n部署成功后，问题来了，怎么可以这么慢？看来 kimai 对于树莓派来说还不够轻量。\n于是我尝试使用 timetagger。\n轻量、简洁、好用。但是有点过于简洁，甚至连登录功能都要自己去实现，这是不是有点不太友好。\n于是我自己修改了下，支持登录功能，以及一个伪 TOTP 功能。\n参考 我的博文 timetagger 定制。\n在移动端的感觉也不错哦，推荐一试。\n还有其他的么 正在努力完善中。\n","date":"2021-11-17T18:27:23+08:00","permalink":"https://gomi1992.github.io/2021/11/17/20211117_%E6%88%91%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE/","section":"post","tags":["树莓派"],"title":"我和树莓派"},{"categories":["无聊的开发"],"contents":"为什么选择 timetagger 树莓派 3B 可能只带的动这个应用，更新版本的可能跑得动其他的。像 kimai 等可能跑不起来。\n为什么要定制 timetagger 没有提供登录功能，或者说登录功能太简陋，于是需要自行定制。\n如何定制 定制界面 把官方自带的界面 copy 到自己 pages 目录下。\n修改 login.md，所有的登录请求都是到这个界面下完成的，所以需要修改它，给它增加登录表单，具体细节看源码。\ntotp 工具 import pyotp username = \u0026#34;your_username\u0026#34; gtoken = pyotp.random_base32(64) data = pyotp.totp.TOTP(gtoken).provisioning_uri(username, issuer_name=\u0026#34;MyTimeTagger\u0026#34;) print(\u0026#34;gtoken\u0026#34;, gtoken) print(\u0026#34;qrcode data\u0026#34;, data) 生成代码参考python 实现 google authenticator 认证 - Pythia 丶陌乐。\n其中 gtoken 就是 totp 密钥，在 run.py 中用到。\nqrcode data 是用来生成二维码的内容，随便找个工具，用这个内容生成二维码，然后使用 authy 这样的工具扫码即可。\n运行代码 修改静态界面资源到自己的 pages 目录。\n引入 pyotp 包。\n增加一个用户字典，保存用户名、密码、totp 密钥信息。\n修改 webtoken_for_localhost 函数。增加用户登录验证。\n部署 timetagger 数据默认放在用户目录下的 _timetagger 目录下。\n可以使用 ln 命令引到其他目录下。\n小结 完整代码https://github.com/gomi1992/timetagger_app\n这不是 totp 的正确使用方式。\n应该先验证用户名密码，再给界面去输入 totp。\n但是目前登录逻辑上还是跟这个流程保持一致。\ntimetagger 的简单定制到此为止。\n","date":"2021-11-17T18:11:56+08:00","permalink":"https://gomi1992.github.io/2021/11/17/20211117_timetagger%E5%AE%9A%E5%88%B6/","section":"post","tags":["时间管理"],"title":"timetagger定制"},{"categories":["无人机"],"contents":"SpeedyBee 蓝牙调参模块虽好，于是我 DIY 了一个。\n为什么要 DIY 这玩意 iphone 没法通过 otg 连接飞控 别人家卖的稍微有点贵 原理 单片机作为 USB Host，与飞控通信。 单片机连接蓝牙串口模块，于手机通信。\n实现方案 speedybee 使用 STM32 F105 + TI CC2541 蓝牙。 STM32 F105 无须额外芯片即可作为 USB Host。\nemmm\n由于没有 F105 的开发板，我便采用了 arduino uno。 结合 USB Host Shield 和 蓝牙串口模块。\nUSB Host Shield 官方购买连接 http://shop.tkjelectronics.dk/product_info.php?products_id=43，官方库（适用于 Arduino）https://github.com/felis/USB_Host_Shield_2.0。该板子使用了 max3421e 芯片。\n直接组装，下载完代码后再连接蓝牙串口模块至 uart 接口（uno 仅有一个 uart）。\n代码 前提是安装 USB Host Shield 的库。\n#include \u0026lt;cdcacm.h\u0026gt; #include \u0026lt;usbhub.h\u0026gt; //#include \u0026#34;pgmstrings.h\u0026#34; // Satisfy the IDE, which needs to see the include statment in the ino too. #ifdef dobogusinclude #include \u0026lt;spi4teensy3.h\u0026gt; #endif #include \u0026lt;SPI.h\u0026gt; class ACMAsyncOper : public CDCAsyncOper { public: uint8_t OnInit(ACM *pacm); }; uint8_t ACMAsyncOper::OnInit(ACM *pacm) { uint8_t rcode; // Set DTR = 1 RTS=1 rcode = pacm-\u0026gt;SetControlLineState(3); if (rcode) { ErrorMessage\u0026lt;uint8_t\u0026gt;(PSTR(\u0026#34;SetControlLineState\u0026#34;), rcode); return rcode; } LINE_CODING lc; lc.dwDTERate = 115200; lc.bCharFormat = 0; lc.bParityType = 0; lc.bDataBits = 8; rcode = pacm-\u0026gt;SetLineCoding(\u0026amp;lc); if (rcode) ErrorMessage\u0026lt;uint8_t\u0026gt;(PSTR(\u0026#34;SetLineCoding\u0026#34;), rcode); return rcode; } USB Usb; //USBHub Hub(\u0026amp;Usb); ACMAsyncOper AsyncOper; ACM Acm(\u0026amp;Usb, \u0026amp;AsyncOper); void setup() { Serial.begin(115200); #if !defined(__MIPSEL__) while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection #endif Serial.println(\u0026#34;Start\u0026#34;); if (Usb.Init() == -1) Serial.println(\u0026#34;OSCOKIRQ failed to assert\u0026#34;); delay( 200 ); } uint8_t datas[64]; void loop() { Usb.Task(); if ( Acm.isReady()) { uint8_t rcode; uint8_t send_count = 0; while (Serial.available() \u0026amp;\u0026amp; send_count \u0026lt; 64) { datas[send_count] = Serial.read(); send_count++; } if (send_count) { rcode = Acm.SndData(send_count, datas); if (rcode) ErrorMessage\u0026lt;uint8_t\u0026gt;(PSTR(\u0026#34;SndData\u0026#34;), rcode); } delay(20); uint8_t buf[64]; uint16_t rcvd = 64; rcode = Acm.RcvData(\u0026amp;rcvd, buf); if (rcode \u0026amp;\u0026amp; rcode != hrNAK) ErrorMessage\u0026lt;uint8_t\u0026gt;(PSTR(\u0026#34;Ret\u0026#34;), rcode); if ( rcvd ) { Serial.write(buf, rcvd); } delay(20); } } ","date":"2020-08-18T14:46:19+08:00","permalink":"https://gomi1992.github.io/2020/08/18/20200818_diy%E9%A3%9E%E6%8E%A7%E8%93%9D%E7%89%99%E8%B0%83%E5%8F%82%E6%A8%A1%E5%9D%97/","section":"post","tags":["无人机","电子","DIY"],"title":"DIY飞控蓝牙调参模块"},{"categories":["无人机"],"contents":"DJI FPV 遥控器如何设置成中国手使用方式。\n入手 DJI FPV 老早大疆就发布了主要应用在穿越机上的图传设备--DJI FPV，我馋了好久，碍于钱包，一直没入手。 前段时间，我终于狠下心买了一套--天空端加遥控器，接着问题来了。 我因为种种原因，从入模坑时就是中国手了，这回买的 DJI 遥控是日本手的。 我本以为这个遥控具有丰富的自定义功能，或者能够很快速的设置为中国手。 结果证明我错了。\n在我装完飞机后，我无奈的发现我没找到改中国手的地方。\n是时候发挥广大人民群众的智慧了。\n在发挥之前，需要科普一下遥控的几个通道。\n航模通道 通道名 含义 A(Aileron) 横滚，副翼 E(Elevator) 俯仰，升降 R(Rudder) 方向，方向舵 T(Throttle) 油门 我们遥控的两个摇杆能够控制上表中的四个通道。 在大多数遥控中没有直接修改遥感与 AETR 对应方式的地方，但是可以通过修改 mode 来达到效果，比如 mode2 对应美国手。 而在 opentx 系统的遥控中可以随意修改 AETR 的对应方式，实在是非常灵活。\n在飞控中修改通道映射 既然我们无法从遥控器设置那里突破，拆遥控也解决不了问题，那飞控呢？ 目前穿越机主流的固件 betaflight、inav 固件都提供通道自定义映射的功能。 以 bf 为例，bf 默认通道映射是 AETR1234，后面的 1234 暂时不用管。 我们日本手的 DJI 遥控连上了后，通道都是正确的，但我想要中国手，也就是横滚和方向需要互换。 那就把 AETR1234 改成 RETA1234 就可以了。 bf 配置器中没有提供直接修改的地方，需要使用命令修改。 在配置器中进入 cli 模式。 输入\nmap RETA1234 并按下回车。 再输入\nsave 按回车。\n这时候飞控重启，不出意外，应该能够改成中国手了。\n","date":"2020-02-01T16:31:15+08:00","permalink":"https://gomi1992.github.io/2020/02/01/20200201_dji-fpv%E9%81%A5%E6%8E%A7%E6%94%B9%E4%B8%AD%E5%9B%BD%E6%89%8B/","section":"post","tags":["DJI","FPV"],"title":"DJI FPV遥控改中国手"}]