<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GoMi_Field</title>
    <link>https://gomi1992.github.io/</link>
    <description>Recent content on GoMi_Field</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2022 09:47:08 +0000</lastBuildDate><atom:link href="https://gomi1992.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的个人计划表</title>
      <link>https://gomi1992.github.io/2022/11/07/20221107_%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E8%A1%A8/</link>
      <pubDate>Mon, 07 Nov 2022 09:47:08 +0000</pubDate>
      
      <guid>https://gomi1992.github.io/2022/11/07/20221107_%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E8%A1%A8/</guid>
      <description>起因 想把自己的工作计划在网页里展示出来，方便监督自己。
想法 plantuml、mermaid、excalidraw都是不错的工具。
plantuml和mermaid最主要的是展示甘特图，最终选择mermaid，原因是界面稍微漂亮一些，而plantuml渲染需要外部服务器。
excalidraw是个非常自由的白板，本打算使用多人协作方式集成它，这样就能多端实时协作，但因为跨域的安全性问题无法集成到网页中。
有了想法就开工。
集成mermaid mermaid提供js脚本，可以直接集成到网页中。
&amp;lt;div id=&amp;#34;mermaid-gantt&amp;#34; class=&amp;#34;mermaid&amp;#34;&amp;gt; gantt dateFormat YYYY-MM-DD axisFormat %y/%d/%m title Schedule excludes weekdays section 个人安排网页&amp;lt;br&amp;gt;开发 集成甘特图 : done, 2022-11-02,3h &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;js/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.onload = function () { mermaid.initialize({ theme: &amp;#39;forest&amp;#39;, // themeCSS: &amp;#39;.node rect { fill: red; }&amp;#39;, logLevel: 3, securityLevel: &amp;#39;loose&amp;#39;, flowchart: {curve: &amp;#39;basis&amp;#39;}, gantt: {axisFormat: &amp;#39;%m/%d/%Y&amp;#39;}, sequence: {actorMargin: 50}, // sequenceDiagram: { actorMargin: 300 } // deprecated }); } &amp;lt;/script&amp;gt; 集成excalidraw 方案1--分享链接集成 这个方案很简单，效果也很好，将excalidraw的分享链接塞进iframe里。 每回修改白板后就把新的链接更新到代码中即可。</description>
    </item>
    
    <item>
      <title>inoreader中快速阅读全文</title>
      <link>https://gomi1992.github.io/2022/07/24/20220724_inoreader%E4%B8%AD%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</link>
      <pubDate>Sun, 24 Jul 2022 08:19:14 +0800</pubDate>
      
      <guid>https://gomi1992.github.io/2022/07/24/20220724_inoreader%E4%B8%AD%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</guid>
      <description>过时的RSS 现在用RSS追资讯的人可能不多了。 RSS没有相似推荐，没有社交，仅仅只有非常单纯的信息流。 随着google reader的关闭，我现在用的最多的阅读器就是inoreader了。
过时的订阅源 现在新兴的媒体基本都不提供RSS订阅方式，毕竟用RSS没法看到他们的广告，也没法去产生各种联动，提高他们的效益。 于是诞生了RSSHub这样的项目，让我们能够用RSS跟上时代。
inoreader的痛 inoreader免费版对于我已经够用了，但是仍存在一点点小问题。 比如我没办法在inoreader中阅读cnbeta的全文，必须得离开rss阅读器。 于是我开始寻求解决方案，比如寻找其他的阅读器作为替代。 但成效甚微，不是不支持阅读区内全文阅读，就是限制太多（需要付费）。
柳暗花明 放弃寻找阅读器替换这条路后，我试着寻找油猴脚本来辅助，也确实找到了一个比较适合我的脚本InoReader Full Feed。 为什么说比较适合呢？因为我的需求很简单，只需要能够以iframe的方式将目标网页嵌入阅读器就可以，而这款脚本的功能超乎了我的想象。 于是我也毫不留情，开始简单粗暴的改造。
在其代码1.06版本上，第1716行(initFullFeed函数中)后插入如下代码。
for(var i=0,j=c.articleContainer.children.length;i&amp;lt;j;i++){ c.articleContainer.removeChild(c.articleContainer.children[0]); } var p = document.createElement(&amp;#34;iframe&amp;#34;); p.setAttribute(&amp;#34;src&amp;#34;,c.itemURL); p.style.width=&amp;#34;100%&amp;#34;; p.style.height=&amp;#34;1000px&amp;#34;; c.articleContainer.appendChild(p); return; 插入后如下图
这段代码先删除文章内的已有元素，然后插入一个iframe元素到文章界面中，并频闭掉剩下的代码。
不完整的美 出于安全性考虑，浏览器禁止向iframe中传入cookie，这就导致一些小功能不好实现。
小trick01 在inoreader的header中插入如下代码，可以解决部分图片防盗链的问题。
&amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;no-referrer&amp;#34;&amp;gt; 当然，已经有人在油猴脚本中实现了显示防盗链图片 for Inoreader。
小trick02 小trick01并不完美，在inoreader中缩略图仍没法加载。 有个办法可以解决，在发送请求时拦截请求，去掉header中的referrer。 浏览器中可以使用ModHeader和requestly.io等插件完成上述功能。</description>
    </item>
    
    <item>
      <title>我和树莓派</title>
      <link>https://gomi1992.github.io/2021/11/17/20211117_%E6%88%91%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE/</link>
      <pubDate>Wed, 17 Nov 2021 18:27:23 +0800</pubDate>
      
      <guid>https://gomi1992.github.io/2021/11/17/20211117_%E6%88%91%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE/</guid>
      <description>树莓派 我手头有一个树莓派 3B 和上古的树莓派 1B。总想拿他们做点事。
做个 nas 吧，说实话我没那么强烈的需求。
做个摄像头监控服务器，我暂时没那么多财产需要监控。
那做个提升自己效率的工具如何？
也不是不行。
选择树莓派做这些事的原因也比较简单。
现成的。 功耗相对较低。 资料较多（主要是没那么多精力去折腾）。 docker 与 portainer 与 duplicati 这我就不多介绍了。
docker 跑容器，portainer 管理 docker，duplicati 备份数据。
在使用 docker 时有一点需要注意，使用 u 盘存储数据时，最好不要使用 fat32，建议使用 ext4 等格式。
我在一开始，使用 fat32 格式的 u 盘，部署 docker+mysql，给 mysql 的数据分配到 u 盘上，mysql 死活无法启动，log 显示 mysql 容器卡在修改文件夹权限那里了，将 U 盘格式从 fat32 换到 ext4 后，就没问题了。
多功能笔记工具 虽然我文笔不行，但是我还是喜欢写点东西记录下。
而且我喜欢搜藏，浏览器里的书签已经让我无法顺利查找了。
我也曾想过自己写一个更强大的书签整理工具。
在我使用 notion 作为书签整理工具后，我发现，notion 还能保存网页。那我为什么要再造一个轮子呢？
那使用 notion 就可以了，那跟树莓派有什么关系呢？
notion 固然强大，可是数据始终存放在别人那里，而我喜欢把数据握在自己手里。
于是我选择在树莓派上部署 trilium notes。</description>
    </item>
    
    <item>
      <title>timetagger定制</title>
      <link>https://gomi1992.github.io/2021/11/17/20211117_timetagger%E5%AE%9A%E5%88%B6/</link>
      <pubDate>Wed, 17 Nov 2021 18:11:56 +0800</pubDate>
      
      <guid>https://gomi1992.github.io/2021/11/17/20211117_timetagger%E5%AE%9A%E5%88%B6/</guid>
      <description>为什么选择 timetagger 树莓派 3B 可能只带的动这个应用，更新版本的可能跑得动其他的。像 kimai 等可能跑不起来。
为什么要定制 timetagger 没有提供登录功能，或者说登录功能太简陋，于是需要自行定制。
如何定制 定制界面 把官方自带的界面 copy 到自己 pages 目录下。
修改 login.md，所有的登录请求都是到这个界面下完成的，所以需要修改它，给它增加登录表单，具体细节看源码。
totp 工具 import pyotp username = &amp;#34;your_username&amp;#34; gtoken = pyotp.random_base32(64) data = pyotp.totp.TOTP(gtoken).provisioning_uri(username, issuer_name=&amp;#34;MyTimeTagger&amp;#34;) print(&amp;#34;gtoken&amp;#34;, gtoken) print(&amp;#34;qrcode data&amp;#34;, data) 生成代码参考python 实现 google authenticator 认证 - Pythia 丶陌乐。
其中 gtoken 就是 totp 密钥，在 run.py 中用到。
qrcode data 是用来生成二维码的内容，随便找个工具，用这个内容生成二维码，然后使用 authy 这样的工具扫码即可。
运行代码 修改静态界面资源到自己的 pages 目录。
引入 pyotp 包。
增加一个用户字典，保存用户名、密码、totp 密钥信息。
修改 webtoken_for_localhost 函数。增加用户登录验证。</description>
    </item>
    
    <item>
      <title>DIY飞控蓝牙调参模块</title>
      <link>https://gomi1992.github.io/2020/08/18/20200818_diy%E9%A3%9E%E6%8E%A7%E8%93%9D%E7%89%99%E8%B0%83%E5%8F%82%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 18 Aug 2020 14:46:19 +0800</pubDate>
      
      <guid>https://gomi1992.github.io/2020/08/18/20200818_diy%E9%A3%9E%E6%8E%A7%E8%93%9D%E7%89%99%E8%B0%83%E5%8F%82%E6%A8%A1%E5%9D%97/</guid>
      <description>SpeedyBee 蓝牙调参模块虽好，于是我 DIY 了一个。
为什么要 DIY 这玩意 iphone 没法通过 otg 连接飞控 别人家卖的稍微有点贵 原理 单片机作为 USB Host，与飞控通信。 单片机连接蓝牙串口模块，于手机通信。
实现方案 speedybee 使用 STM32 F105 + TI CC2541 蓝牙。 STM32 F105 无须额外芯片即可作为 USB Host。
emmm
由于没有 F105 的开发板，我便采用了 arduino uno。 结合 USB Host Shield 和 蓝牙串口模块。
USB Host Shield 官方购买连接 http://shop.tkjelectronics.dk/product_info.php?products_id=43，官方库（适用于 Arduino）https://github.com/felis/USB_Host_Shield_2.0。该板子使用了 max3421e 芯片。
直接组装，下载完代码后再连接蓝牙串口模块至 uart 接口（uno 仅有一个 uart）。
代码 前提是安装 USB Host Shield 的库。
#include &amp;lt;cdcacm.h&amp;gt; #include &amp;lt;usbhub.h&amp;gt; //#include &amp;#34;pgmstrings.h&amp;#34; // Satisfy the IDE, which needs to see the include statment in the ino too.</description>
    </item>
    
    <item>
      <title>DJI FPV遥控改中国手</title>
      <link>https://gomi1992.github.io/2020/02/01/20200201_dji-fpv%E9%81%A5%E6%8E%A7%E6%94%B9%E4%B8%AD%E5%9B%BD%E6%89%8B/</link>
      <pubDate>Sat, 01 Feb 2020 16:31:15 +0800</pubDate>
      
      <guid>https://gomi1992.github.io/2020/02/01/20200201_dji-fpv%E9%81%A5%E6%8E%A7%E6%94%B9%E4%B8%AD%E5%9B%BD%E6%89%8B/</guid>
      <description>DJI FPV 遥控器如何设置成中国手使用方式。
入手 DJI FPV 老早大疆就发布了主要应用在穿越机上的图传设备--DJI FPV，我馋了好久，碍于钱包，一直没入手。 前段时间，我终于狠下心买了一套--天空端加遥控器，接着问题来了。 我因为种种原因，从入模坑时就是中国手了，这回买的 DJI 遥控是日本手的。 我本以为这个遥控具有丰富的自定义功能，或者能够很快速的设置为中国手。 结果证明我错了。
在我装完飞机后，我无奈的发现我没找到改中国手的地方。
是时候发挥广大人民群众的智慧了。
在发挥之前，需要科普一下遥控的几个通道。
航模通道 通道名 含义 A(Aileron) 横滚，副翼 E(Elevator) 俯仰，升降 R(Rudder) 方向，方向舵 T(Throttle) 油门 我们遥控的两个摇杆能够控制上表中的四个通道。 在大多数遥控中没有直接修改遥感与 AETR 对应方式的地方，但是可以通过修改 mode 来达到效果，比如 mode2 对应美国手。 而在 opentx 系统的遥控中可以随意修改 AETR 的对应方式，实在是非常灵活。
在飞控中修改通道映射 既然我们无法从遥控器设置那里突破，拆遥控也解决不了问题，那飞控呢？ 目前穿越机主流的固件 betaflight、inav 固件都提供通道自定义映射的功能。 以 bf 为例，bf 默认通道映射是 AETR1234，后面的 1234 暂时不用管。 我们日本手的 DJI 遥控连上了后，通道都是正确的，但我想要中国手，也就是横滚和方向需要互换。 那就把 AETR1234 改成 RETA1234 就可以了。 bf 配置器中没有提供直接修改的地方，需要使用命令修改。 在配置器中进入 cli 模式。 输入
map RETA1234 并按下回车。 再输入</description>
    </item>
    
  </channel>
</rss>
